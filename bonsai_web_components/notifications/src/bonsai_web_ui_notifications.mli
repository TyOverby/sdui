open! Core
module Bonsai_proc := Bonsai_web.Proc
open! Bonsai_web

(** This is a notifications component that provides pretty and user-friendly(ish)
    notifications, with automatic fade-out & dismissal after a time span. *)

module Id : sig
  (** An Id is given to a notification when created, and can be used to close or modify
      the corresponding notification. *)
  type 'a t
end

type 'a t

(** Creates a component that acts as a store for notifications.  The type of a
    notification is ['a], allowing it to be determinable by the user. *)
val component
  :  (module Bonsai_proc.Model with type t = 'a)
  -> equal:('a -> 'a -> bool)
  -> Bonsai.graph
  -> 'a t Bonsai.t

(** [render] allows you to defined the rendering logic for your notification component.
    Each notification is rendered by calling the [f] function. The [close] value passed to
    [f] allows your custom rendering function to close itself. *)
val render
  :  'a t Bonsai.t
  -> f:
       (close:unit Effect.t Bonsai.t
        -> 'a Bonsai.t
        -> Bonsai.graph
        -> Vdom.Node.t Bonsai.t)
  -> Bonsai.graph
  -> Vdom.Node.t Bonsai.t

(** Scheduling [send_notification] will register a new notification with the the notification
    store. It returns the id of the computation which can be used to manipulate the notification
    with functions like [close_notification] and [modify_notification] *)
val send_notification : ?close_after:Time_ns.Span.t -> 'a t -> 'a -> 'a Id.t Effect.t

(** [close_notification] provides another way of closing notificiations outside of
    waiting a specified amount of time or letting each notification close itself with a button.
    It closes a specific notification determined by an id. *)
val close_notification : 'a t -> 'a Id.t -> unit Effect.t

(** [close_all_notifications] closes all currently open notifications *)
val close_all_notifications : 'a t -> unit Effect.t

(** [close_oldest_notification] closes the oldest currently open notification *)
val close_oldest_notification : 'a t -> unit Effect.t

(** [close_newest_notification] closes the newest currently open notification *)
val close_newest_notification : 'a t -> unit Effect.t

(** [modify_notification] updates the content of a previously sent notification
    identified by its [Id.t].  When modified, the timeout for the notification is also
    reset. *)
val modify_notification
  :  ?close_after:Time_ns.Span.t
  -> 'a t
  -> 'a Id.t
  -> 'a
  -> unit Effect.t

module Basic : sig
  (** This module contains a API that is backwards compatible with the first version
      of the notifications library. *)
  type t

  module Notification_style : sig
    module type S = sig
      (** These CSS classes are applied to the notifications that are generated by
          [to_vdom]. To customise the color of these notifications, set the
          [background-color] attribute to your desired color. *)

      module For_referencing : sig
        val error : string
        val success : string
      end

      val error : Vdom.Attr.t
      val success : Vdom.Attr.t
    end

    type t = (module S)
  end

  val create
    :  ?dismiss_notifications_after:Time_ns.Span.t Bonsai.t (** default = 15s *)
    -> ?dismiss_errors_automatically:bool Bonsai.t (** default = false *)
    -> unit
    -> Bonsai.graph
    -> t Bonsai.t

  (** [add_error] will create a notification with [text] in primary focus and [error] pretty
      printed in small font (if provided). *)
  val add_error : ?error:Error.t -> t -> text:string -> unit Ui_effect.t

  (** [add_success] creates a notification with only [text] in primary focus. *)
  val add_success : t -> text:string -> unit Ui_effect.t

  val render
    :  ?notification_style:(module Notification_style.S)
    -> ?notification_extra_attr:Vdom.Attr.t Bonsai.t
    -> ?notification_container_extra_attr:Vdom.Attr.t Bonsai.t
    -> t Bonsai.t
    -> Bonsai.graph
    -> Vdom.Node.t Bonsai.t
end
